'use client';

import { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { AlertCircle, Check, Eye, EyeOff } from 'lucide-react';

interface User {
  id: string;
  name: string;
  email: string;
}

interface PasswordResetModalProps {
  user: User | null;
  isOpen: boolean;
  onClose: () => void;
}

// Function to generate a strong password
const generateStrongPassword = () => {
  const uppercase = 'ABCDEFGHJKLMNPQRSTUVWXYZ';
  const lowercase = 'abcdefghijkmnopqrstuvwxyz';
  const numbers = '23456789';
  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';
  
  let password = '';
  
  // Ensure at least one of each character type
  password += uppercase.charAt(Math.floor(Math.random() * uppercase.length));
  password += lowercase.charAt(Math.floor(Math.random() * lowercase.length));
  password += numbers.charAt(Math.floor(Math.random() * numbers.length));
  password += symbols.charAt(Math.floor(Math.random() * symbols.length));
  
  // Add additional random characters to reach desired length (12-16 chars)
  const length = Math.floor(Math.random() * 5) + 12; // Length between 12-16
  const allChars = uppercase + lowercase + numbers + symbols;
  
  for (let i = password.length; i < length; i++) {
    password += allChars.charAt(Math.floor(Math.random() * allChars.length));
  }
  
  // Shuffle the password
  return password.split('').sort(() => 0.5 - Math.random()).join('');
};

// Calculate password strength in bits of entropy
const calculatePasswordStrength = (password: string): { bits: number; label: string; color: string } => {
  if (!password) return { bits: 0, label: 'None', color: 'bg-gray-300' };
  
  // Character set sizes
  const hasLower = /[a-z]/.test(password);
  const hasUpper = /[A-Z]/.test(password);
  const hasDigit = /\d/.test(password);
  const hasSymbol = /[^A-Za-z0-9]/.test(password);
  
  // Calculate pool size based on character types used
  let poolSize = 0;
  if (hasLower) poolSize += 26;
  if (hasUpper) poolSize += 26;
  if (hasDigit) poolSize += 10;
  if (hasSymbol) poolSize += 33; // Approximate for common symbols
  
  // Shannon entropy formula: bits = log2(poolSize^length)
  // Simplified to: bits = length * log2(poolSize)
  const bits = Math.round(password.length * (Math.log(poolSize) / Math.log(2)));
  
  // Determine strength label and color
  let label: string;
  let color: string;
  if (bits < 40) {
    label = 'Very Weak';
    color = 'bg-red-500';
  } else if (bits < 60) {
    label = 'Weak';
    color = 'bg-orange-500';
  } else if (bits < 80) {
    label = 'Moderate';
    color = 'bg-yellow-500';
  } else if (bits < 100) {
    label = 'Strong';
    color = 'bg-green-500';
  } else {
    label = 'Very Strong';
    color = 'bg-green-600';
  }
  
  return { bits, label, color };
};

export function PasswordResetModal({ user, isOpen, onClose }: PasswordResetModalProps) {
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [passwordsMatch, setPasswordsMatch] = useState(true);
  const [useAutoGenerated, setUseAutoGenerated] = useState(true);
  const [passwordResetSuccess, setPasswordResetSuccess] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [mounted, setMounted] = useState(false);
  
  // Calculate password strength
  const passwordStrength = calculatePasswordStrength(newPassword);
  
  // Track when the component is mounted to avoid hydration issues with portals
  useEffect(() => {
    setMounted(true);
    return () => setMounted(false);
  }, []);
  
  // Generate password when modal opens
  useEffect(() => {
    if (isOpen && useAutoGenerated) {
      const generated = generateStrongPassword();
      setNewPassword(generated);
      setConfirmPassword(generated);
    }
  }, [isOpen, useAutoGenerated]);
  
  // Check if passwords match when confirmation changes
  useEffect(() => {
    if (!useAutoGenerated) {
      setPasswordsMatch(confirmPassword === newPassword || confirmPassword === '');
    }
  }, [confirmPassword, newPassword, useAutoGenerated]);
  
  if (!isOpen || !mounted) return null;
  
  const handleTogglePasswordType = () => {
    setUseAutoGenerated((prev) => {
      const newValue = !prev;
      if (newValue) {
        // If switching to auto-generated, generate a new password
        const generated = generateStrongPassword();
        setNewPassword(generated);
        setConfirmPassword(generated);
      } else {
        // If switching to manual, clear the fields
        setNewPassword('');
        setConfirmPassword('');
      }
      return newValue;
    });
  };
  
  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewPassword(e.target.value);
  };
  
  const handleConfirmPasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setConfirmPassword(e.target.value);
  };
  
  const handleResetPassword = () => {
    // Validate password confirmation for manual entries
    if (!useAutoGenerated && newPassword !== confirmPassword) {
      setPasswordsMatch(false);
      return;
    }
    
    // Here you would typically make an API call to reset the user's password
    console.log(`Password for ${user?.name} has been reset to: ${newPassword}`);
    
    // Show success message
    setPasswordResetSuccess(true);
    
    // In a real application, you might want to close the dialog after a delay
    setTimeout(() => {
      onClose();
      // Reset state after modal closes
      setTimeout(() => {
        setPasswordResetSuccess(false);
        if (useAutoGenerated) {
          const generated = generateStrongPassword();
          setNewPassword(generated);
          setConfirmPassword(generated);
        } else {
          setNewPassword('');
          setConfirmPassword('');
        }
        setShowPassword(false);
      }, 300);
    }, 2000);
  };
  
  // Close handler that ensures state is properly reset
  const handleClose = () => {
    onClose();
    // Reset state after modal closes
    setTimeout(() => {
      setPasswordResetSuccess(false);
      if (useAutoGenerated) {
        const generated = generateStrongPassword();
        setNewPassword(generated);
        setConfirmPassword(generated);
      } else {
        setNewPassword('');
        setConfirmPassword('');
      }
      setShowPassword(false);
    }, 300);
  };
  
  const backdropClickHandler = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      handleClose();
    }
  };
  
  const togglePasswordVisibility = () => {
    setShowPassword((prev) => !prev);
  };
  
  const modalContent = (
    <>
      {/* Semi-transparent backdrop */}
      <div className="fixed inset-0 z-[999] bg-black/50 backdrop-blur-md w-screen h-screen" 
        onClick={backdropClickHandler}
        onKeyDown={(e) => {
          if (e.key === 'Escape') handleClose();
        }}
        style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0 }}
      />
      
      {/* Modal dialog - positioned to avoid footer */}
      <div 
        className="fixed z-[999] left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-full max-w-md mx-auto rounded-lg shadow-lg p-6 bg-[#1a1a1a] text-[#f5f5f5] border border-[#2a2a2a]"
        onClick={(e) => e.stopPropagation()}
        onKeyDown={(e) => {
          e.stopPropagation();
          if (e.key === 'Escape') handleClose();
        }}
        aria-modal="true"
        aria-labelledby="password-reset-title"
        style={{ maxHeight: 'calc(100vh - 80px)', overflowY: 'auto' }}
      >
        <div className="mb-4">
          <h2 id="password-reset-title" className="text-xl font-semibold">Reset Password</h2>
          <p className="text-sm mt-1 text-[#a3a3a3]">
            Reset password for {user?.name}
          </p>
        </div>
        
        {passwordResetSuccess ? (
          <div className="p-4 bg-green-500/10 border border-green-500/30 rounded-md text-green-400 flex items-start gap-2">
            <Check className="h-5 w-5" />
            <div>
              <p className="font-medium">Password reset successful</p>
              <p className="text-sm opacity-80">The user will need to log in with their new password.</p>
            </div>
          </div>
        ) : (
          <>
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="auto-generate"
                  checked={useAutoGenerated}
                  onChange={handleTogglePasswordType}
                  className="rounded bg-[#121212] border-[#2a2a2a] text-[#ff6b00]"
                />
                <Label htmlFor="auto-generate" className="cursor-pointer text-sm">
                  Generate strong password automatically
                </Label>
              </div>
              
              <div>
                <Label htmlFor="new-password" className="text-[#e0e0e0] text-sm">
                  {useAutoGenerated ? "Auto-generated password" : "Enter new password"}
                </Label>
                <div className="relative mt-1">
                  <Input
                    id="new-password"
                    type={showPassword ? "text" : "password"}
                    value={newPassword}
                    onChange={handlePasswordChange}
                    readOnly={useAutoGenerated}
                    className={`font-mono bg-[#121212] border-[#2a2a2a] pr-10 ${
                      useAutoGenerated ? "opacity-80" : ""
                    }`}
                  />
                  <button
                    type="button"
                    onClick={togglePasswordVisibility}
                    className="absolute inset-y-0 right-0 flex items-center pr-3 text-[#a3a3a3]"
                    aria-label={showPassword ? "Hide password" : "Show password"}
                  >
                    {showPassword ? (
                      <EyeOff className="h-4 w-4" />
                    ) : (
                      <Eye className="h-4 w-4" />
                    )}
                  </button>
                </div>
                
                {/* Password strength meter */}
                {newPassword && (
                  <div className="mt-2">
                    <div className="flex justify-between text-xs">
                      <span>Password strength: {passwordStrength.label}</span>
                      <span>{passwordStrength.bits} bits</span>
                    </div>
                    <div className="h-1.5 w-full bg-[#2a2a2a] rounded-full mt-1 overflow-hidden">
                      <div
                        className={`h-full ${passwordStrength.color} transition-all`}
                        style={{ width: `${Math.min(100, (passwordStrength.bits / 128) * 100)}%` }}
                      />
                    </div>
                  </div>
                )}
                
                {!useAutoGenerated && (
                  <div className="mt-2 text-xs text-[#a3a3a3]">
                    Password must be at least 12 characters and include uppercase, lowercase, 
                    numbers, and special characters.
                  </div>
                )}
              </div>
              
              {/* Confirm password field - only shown for manual password entry */}
              {!useAutoGenerated && (
                <div>
                  <Label htmlFor="confirm-password" className="text-[#e0e0e0] text-sm">
                    Confirm password
                  </Label>
                  <div className="relative mt-1">
                    <Input
                      id="confirm-password"
                      type={showPassword ? "text" : "password"}
                      value={confirmPassword}
                      onChange={handleConfirmPasswordChange}
                      className={`font-mono bg-[#121212] border-[#2a2a2a] pr-10 ${
                        !passwordsMatch ? "border-red-500" : ""
                      }`}
                    />
                    <button
                      type="button"
                      onClick={togglePasswordVisibility}
                      className="absolute inset-y-0 right-0 flex items-center pr-3 text-[#a3a3a3]"
                      aria-label={showPassword ? "Hide password" : "Show password"}
                    >
                      {showPassword ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </button>
                  </div>
                  {!passwordsMatch && confirmPassword !== '' && (
                    <p className="mt-1 text-xs text-red-500">Passwords do not match</p>
                  )}
                </div>
              )}
              
              <div className="p-3 bg-[#121212] rounded text-sm text-[#a3a3a3]">
                <p>• This action will immediately invalidate the user's current password</p>
                <p>• User will be prompted to change their password on next login</p>
                <p>• This action will be logged in the system security audit</p>
              </div>
            </div>
            
            <div className="mt-6 flex justify-between">
              <Button 
                type="button" 
                variant="outline" 
                onClick={handleClose}
                className="bg-[#121212] border-[#2a2a2a] hover:bg-[#252525] text-[#e0e0e0]"
              >
                Cancel
              </Button>
              <Button 
                type="button"
                onClick={handleResetPassword}
                className="bg-[#ff2d55] hover:bg-[#ff2d55]/80 text-white"
                disabled={!newPassword || (!useAutoGenerated && (!passwordsMatch || !confirmPassword))}
              >
                Reset Password
              </Button>
            </div>
          </>
        )}
      </div>
    </>
  );
  
  // Use createPortal to render the modal at the document root
  return createPortal(
    modalContent,
    document.body
  );
} 